"""
An√°lise detalhada da resposta em frequ√™ncia do filtro Butterworth
Verificando se est√° cortando adequadamente acima de 50Hz
"""

import numpy as np
from scipy.signal import freqz, welch
import sys
import os

# Adicionar o diret√≥rio pai ao path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from signal_processing.butter_filter import ButterworthFilter


def analyze_filter_response():
    """An√°lise detalhada da resposta em frequ√™ncia"""
    print("=" * 70)
    print("AN√ÅLISE DETALHADA DA RESPOSTA EM FREQU√äNCIA")
    print("=" * 70)
    
    # Criar filtro atual
    butter_filter = ButterworthFilter(lowcut=0.5, highcut=50.0, fs=125.0, order=5)
    
    # Calcular resposta em frequ√™ncia com alta resolu√ß√£o
    w, h = freqz(butter_filter.b, butter_filter.a, worN=8192, fs=125.0)
    magnitude_db = 20 * np.log10(np.abs(h) + 1e-12)  # Evitar log(0)
    
    print(f"Filtro atual: {butter_filter.get_filter_info()['type']}")
    print(f"Par√¢metros: {butter_filter.lowcut}-{butter_filter.highcut}Hz, ordem {butter_filter.order}")
    print()
    
    # Testar frequ√™ncias espec√≠ficas em detalhes
    test_frequencies = [
        # Frequ√™ncias baixas (devem ser atenuadas)
        0.1, 0.2, 0.3, 0.4, 0.5,
        # Banda passante (devem passar)
        1.0, 5.0, 10.0, 20.0, 30.0, 40.0, 45.0, 50.0,
        # Frequ√™ncias altas (devem ser MUITO atenuadas)
        52.0, 55.0, 60.0, 65.0, 70.0, 80.0, 100.0, 120.0
    ]
    
    print("RESPOSTA EM FREQU√äNCIA DETALHADA:")
    print("-" * 70)
    print(f"{'Frequ√™ncia':>10} {'Magnitude':>12} {'Status':>20} {'Esperado':>20}")
    print("-" * 70)
    
    problems = []
    
    for freq in test_frequencies:
        freq_idx = np.argmin(np.abs(w - freq))
        attenuation = magnitude_db[freq_idx]
        
        # Determinar status esperado e real
        if freq < 0.5:
            expected = "ATENUADA (<-20dB)"
            status = "‚úì ATENUADA" if attenuation < -20 else "‚ùå INSUFICIENTE"
            if attenuation >= -20:
                problems.append(f"Frequ√™ncia {freq}Hz: {attenuation:.1f}dB (deveria ser <-20dB)")
        elif freq > 50.0:
            expected = "MUITO ATENUADA (<-40dB)"
            status = "‚úì MUITO ATENUADA" if attenuation < -40 else "‚ùå INSUFICIENTE"
            if attenuation >= -40:
                problems.append(f"Frequ√™ncia {freq}Hz: {attenuation:.1f}dB (deveria ser <-40dB)")
        else:
            expected = "PASSA (>-3dB)"
            status = "‚úì PASSA" if attenuation > -3 else "‚ö† ATENUADA"
            if attenuation <= -3:
                problems.append(f"Frequ√™ncia {freq}Hz: {attenuation:.1f}dB (deveria ser >-3dB)")
        
        print(f"{freq:>10.1f} {attenuation:>12.1f} dB {status:>20} {expected:>20}")
    
    return problems, butter_filter


def test_high_frequency_rejection():
    """Teste espec√≠fico para rejei√ß√£o de altas frequ√™ncias"""
    print("\n" + "=" * 70)
    print("TESTE ESPEC√çFICO: REJEI√á√ÉO DE ALTAS FREQU√äNCIAS")
    print("=" * 70)
    
    butter_filter = ButterworthFilter(lowcut=0.5, highcut=50.0, fs=125.0, order=5)
    
    # Gerar sinais de teste em diferentes frequ√™ncias
    fs = 125.0
    duration = 4.0
    t = np.linspace(0, duration, int(duration * fs))
    
    high_frequencies = [55, 60, 65, 70, 80, 100, 120]
    
    print("Testando atenua√ß√£o de frequ√™ncias espec√≠ficas:")
    print("-" * 50)
    print(f"{'Freq (Hz)':>8} {'RMS Original':>12} {'RMS Filtrado':>12} {'Atenua√ß√£o':>12}")
    print("-" * 50)
    
    insufficient_attenuation = []
    
    for freq in high_frequencies:
        if freq > fs/2:  # N√£o testar frequ√™ncias acima de Nyquist
            continue
            
        # Gerar sinal puro na frequ√™ncia
        signal = np.sin(2 * np.pi * freq * t)
        
        # Aplicar filtro
        filtered = butter_filter.apply_filter(signal)
        
        # Calcular RMS
        rms_original = np.sqrt(np.mean(signal**2))
        rms_filtered = np.sqrt(np.mean(filtered**2))
        
        # Calcular atenua√ß√£o em dB
        if rms_filtered > 0:
            attenuation_db = 20 * np.log10(rms_filtered / rms_original)
        else:
            attenuation_db = -120  # Muito baixo
        
        print(f"{freq:>8.0f} {rms_original:>12.4f} {rms_filtered:>12.4f} {attenuation_db:>12.1f} dB")
        
        # Verificar se a atenua√ß√£o √© suficiente (>40dB para freq > 50Hz)
        if attenuation_db > -40:
            insufficient_attenuation.append((freq, attenuation_db))
    
    return insufficient_attenuation


def suggest_better_filter():
    """Sugerir melhorias no filtro"""
    print("\n" + "=" * 70)
    print("COMPARA√á√ÉO COM FILTROS MELHORADOS")
    print("=" * 70)
    
    filters_to_test = [
        ("Atual (ordem 5)", 5),
        ("Melhorado (ordem 8)", 8),
        ("Agressivo (ordem 10)", 10)
    ]
    
    test_freq = 60.0  # Frequ√™ncia cr√≠tica para testar
    
    print(f"Testando atenua√ß√£o em {test_freq}Hz:")
    print("-" * 50)
    print(f"{'Filtro':>20} {'Atenua√ß√£o (dB)':>15} {'Status':>15}")
    print("-" * 50)
    
    best_filter = None
    best_attenuation = 0
    
    for filter_name, order in filters_to_test:
        try:
            test_filter = ButterworthFilter(lowcut=0.5, highcut=50.0, fs=125.0, order=order)
            
            # Calcular resposta em frequ√™ncia
            w, h = freqz(test_filter.b, test_filter.a, worN=8192, fs=125.0)
            
            # Encontrar atenua√ß√£o em 60Hz
            freq_idx = np.argmin(np.abs(w - test_freq))
            attenuation = 20 * np.log10(np.abs(h[freq_idx]) + 1e-12)
            
            status = "‚úì BOM" if attenuation < -40 else "‚ö† INSUFICIENTE"
            
            print(f"{filter_name:>20} {attenuation:>15.1f} {status:>15}")
            
            if attenuation < best_attenuation:
                best_attenuation = attenuation
                best_filter = (filter_name, order, attenuation)
                
        except Exception as e:
            print(f"{filter_name:>20} {'ERRO':>15} {str(e)[:15]:>15}")
    
    return best_filter


def main():
    """Fun√ß√£o principal"""
    print("DIAGN√ìSTICO COMPLETO DO FILTRO BUTTERWORTH")
    print("Verificando se corta adequadamente acima de 50Hz")
    print()
    
    # An√°lise da resposta em frequ√™ncia
    problems, current_filter = analyze_filter_response()
    
    # Teste de rejei√ß√£o de altas frequ√™ncias
    insufficient_att = test_high_frequency_rejection()
    
    # Sugest√£o de melhorias
    best_filter = suggest_better_filter()
    
    # Resumo dos problemas encontrados
    print("\n" + "=" * 70)
    print("DIAGN√ìSTICO FINAL")
    print("=" * 70)
    
    if problems:
        print("‚ùå PROBLEMAS ENCONTRADOS:")
        for problem in problems:
            print(f"   ‚Ä¢ {problem}")
    else:
        print("‚úÖ Resposta em frequ√™ncia adequada")
    
    if insufficient_att:
        print(f"\n‚ùå ATENUA√á√ÉO INSUFICIENTE em altas frequ√™ncias:")
        for freq, att in insufficient_att:
            print(f"   ‚Ä¢ {freq}Hz: apenas {att:.1f}dB (deveria ser <-40dB)")
    else:
        print("‚úÖ Atenua√ß√£o adequada em altas frequ√™ncias")
    
    # Recomenda√ß√µes
    print("\nüìã RECOMENDA√á√ïES:")
    
    if problems or insufficient_att:
        print("   1. ‚ùó O filtro atual (ordem 5) √© INSUFICIENTE")
        print("   2. üîß AUMENTAR a ordem do filtro para 8 ou 10")
        print("   3. ‚ö° Considerar filtro Chebyshev Type II para melhor rejei√ß√£o")
        
        if best_filter:
            name, order, att = best_filter
            print(f"   4. üí° Melhor op√ß√£o: {name} (atenua√ß√£o: {att:.1f}dB)")
    else:
        print("   ‚úÖ Filtro atual est√° adequado")
    
    return len(problems) == 0 and len(insufficient_att) == 0


if __name__ == "__main__":
    success = main()
    if not success:
        print(f"\nüö® A√á√ÉO NECESS√ÅRIA: Melhorar o filtro para maior atenua√ß√£o!")
    exit(0 if success else 1)
